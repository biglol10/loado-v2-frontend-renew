/**
 * 데이터 유형별 최적화된 캐싱 설정
 *
 * 이 파일은 다양한 데이터 유형에 맞게 최적화된 캐싱 설정을 정의합니다.
 *
 * 이점:
 * 1. 효율성: 데이터 유형에 따라 적절한 캐싱 전략 적용으로 네트워크 요청 최소화
 * 2. 신선도: 각 데이터 유형의 특성에 맞는 staleTime 설정으로 데이터 신선도 보장
 * 3. 일관성: 애플리케이션 전체에서 일관된 캐싱 설정 사용
 * 4. 성능: 적절한 캐싱으로 사용자 경험 향상 및 서버 부하 감소
 */
export const cacheConfig = {
  // 자주 변경되지 않는 아이템 마스터 데이터
  staticData: {
    staleTime: 24 * 60 * 60 * 1000, // 24시간 - 거의 변경되지 않는 데이터는 하루에 한 번만 갱신
    cacheTime: 7 * 24 * 60 * 60 * 1000, // 7일 - 오래 캐시에 보관하여 재방문 시 빠른 로딩
    retry: 1, // 실패 시 한 번만 재시도
  },

  // 가격 정보처럼 자주 변경되는 데이터
  dynamicData: {
    staleTime: 5 * 60 * 1000, // 5분 - 적당한 주기로 데이터 갱신 필요
    cacheTime: 60 * 60 * 1000, // 1시간 - 어느 정도는 캐시에 유지하여 불필요한 네트워크 요청 방지
    retry: 2, // 실시간성이 중요하므로 실패 시 두 번 재시도
  },

  // 사용자별 데이터
  userData: {
    staleTime: 30 * 1000, // 30초 - 사용자 관련 데이터는 더 자주 갱신 필요
    cacheTime: 10 * 60 * 1000, // 10분 - 사용자 세션 동안 캐시 유지
    retry: 2, // 사용자 경험에 직접적인 영향이 있으므로 두 번 재시도
  },
} as const; // 설정이 변경되지 않도록 const assertion 사용
